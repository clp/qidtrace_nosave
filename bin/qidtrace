#! /usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;

use Sendmail::QidTrace qw/match_line/;

our $VERSION = '0.02';
our @matching_qids
    ;    # TBD: Global var used in QidTrace.pm's match_line().

my $DEBUG = 0;    # Set to 1 to enable debug stmts.
                  # Set to 0 to run tests & for normal operation.

my $prog = $0;
$prog =~ s{\A.*/}{};    # strip leading path, if any
my $window_size = 2600;
$window_size = 20 if $DEBUG;    #DBG

#TMP $window_size = 1400 if $DEBUG;    #DBG
my $email_address;
my $emit_line_numbers   = 0;
my $output_start_column = 0;
my $output_length       = 0;    # default to the whole line

my @emitted;                    #TBR

unless (
    GetOptions(

        # input matching
        'window-size=i'   => \$window_size,
        'match-pattern=s' => \$email_address,

        # output formatting
        'number-output' => \$emit_line_numbers,

 # control what part of the match line we emit by calls to substr
        'start-column=i'  => \$output_start_column,
        'output-length=i' => \$output_length
    )
    )
{
    die usage();
}
unless ($email_address) {
    die "$prog died: No email address found on command line\n\n",
        usage();
}

my $qt = new Sendmail::QidTrace::Queue(
    {   match        => $email_address,
        window_size  => $window_size,
        line_numbers => $emit_line_numbers
    }
);
while (<>) {
    chomp;
    my $line;
    my $num;
    $qt->push_onto_leading_array(
        {   num  => $.,
            line => $_
        }
    );

    #DBG print "DBG.while: \$.: ,$.,\n" if ($DEBUG);

    # Fill the _leading array before checking for matches.
    if ( $qt->size_of_leading_array > $window_size ) {

       #TBR2 my $line = $qt->shift_off_leading_array()
       #TBR2 ;    #TBD: Use this var, or use hash from @_leading?

     # Deref to get the hash & get value for keys 'line' & 'num'.
        my $leadref = $qt->shift_off_leading_array();
        my %leadh   = %$leadref;
        my $line    = $leadh{line};
        my $num     = $leadh{num};

        my ( $match_email, $match_qid )
            = match_line( $email_address, $line );

        next
            if ( $match_qid eq '' )
            ;    # No qid found: skip to next line.
        ##TBD: Does this skip lines w/ addr & no qid?  Maybe move it down or rm?
        ## Are there such lines?

        if ( $match_email || $match_qid ) { #TBD: Use only email?
            $qt->add_match(
                {   match => $match_email,
                    qid   => $match_qid,
                    line  => (
                        $output_length
                        ? substr(
                            $line,
                            $output_start_column,
                            $output_length
                            )
                        : substr(
                            $line, $output_start_column
                        )
                    ),
                    num => $num
                }
            );

            # Check for matching qid's in the buffer.
            #TBR? my @emitted;    #TBR
            foreach my $lref (
                $qt->get_leading_array,
                $qt->get_trailing_array
                )
            {
                my %lh            = %$lref;
                my $ln_from_buf   = $lh{line};
                my $lnum_from_buf = $lh{num};

                #TBR2 my $lnum_from_buf;    #TBR
                #TBR2 my $ln_from_buf = $lref;

#TBD: Will grep o/p be correct for line 120 if @emitted contains 12?
                if (   defined $ln_from_buf
                    && ( $ln_from_buf =~ /$match_qid/ )
                    && ( !grep ( /$lnum_from_buf/, @emitted ) ) )
                {
                    my ( $match_email, $match_qid )
                        = match_line( $email_address,
                        $ln_from_buf );

                    ## Skip current line to avoid adding a duplicate line in o/p,
                    ## if it has the matching email addr and a matching qid.
                    ## Only add this line to the o/p when it is shifted off the
                    ## leading array to check its email addr.
                    next if ( $match_email eq $email_address );

                    ##DBG print "DBG.buffer_match_found: \$num: ,$num,\n"
                    ##DBG if ($DEBUG);
                    $qt->add_match(
                        {   match => $match_email,
                            qid   => $match_qid,
                            line  => (
                                $output_length
                                ? substr(
                                    $ln_from_buf,
                                    $output_start_column,
                                    $output_length
                                    )
                                : substr(
                                    $ln_from_buf,
                                    $output_start_column
                                )
                            ),
                            num => $lnum_from_buf
                        }
                    );
                    push @emitted, $lnum_from_buf;
                }
            } # End inner loop: check entire buffer for matching qid's.

     # Cleanup after finding a matching email, and after checking
     # the entire buffer for matching lines.
     # Print all the lines stored in %_seen.
            print_matching_lines() if ( $qt->get_seen_hash );

            # Erase content of %_seen.
            $qt->erase_seen_hash();

         # Erase the saved qids to avoid bogus duplicates at o/p.
            @Main::matching_qids = ();

            # Read next i/p line.
            # Do not push current line onto @_trailing.
            next;
        }    # End if ($match_email...)

       # Save line to trailing array if not added to %_seen hash.
        $qt->push_onto_trailing_array($line);
        if ( $qt->size_of_trailing_array >= $window_size ) {

            $qt->shift_off_trailing_array();
            ##TBD: Maybe check the line for matching qid before tossing.
        }

    }    # End if (leading array > window_size )
}    # End while()

$qt->drain_queue( $output_start_column, $output_length,
    $emit_line_numbers, \@emitted );

# Print all matching lines from the %_seen hash; hash holds individual lines only.
sub print_matching_lines {
    foreach my $k ( sort keys %{ $qt->get_seen_hash } ) {

#TBF: Specifying cmd line param '-s' can affect the sorted o/p.  Fix this.
        my $h = shift( @{ ${ $qt->get_seen_hash }{$k} } );
        print "${$h}{num}; " if ($emit_line_numbers);

        #ORG  print "${$h}{line}\n";
        print "${$h}{line}\n";

        foreach ( @{ ${ $qt->get_seen_hash }{$k} } ) {
            print "**** ";
            print "${$_}{num}; " if ($emit_line_numbers);
            print "${$_}{line}\n";
        }
    }
}

# =begin comment

# Print all matching lines from the %_seen hash; hash holds refs to hashes of line & line number.
sub print_matching_lines_0_HASH {
    foreach my $k ( sort keys %{ $qt->get_seen_hash } ) {

#TBF: Specifying cmd line param '-s' can affect the sorted o/p.  Fix this.
        my $h = shift( @{ ${ $qt->get_seen_hash }{$k} } );
        print "${$h}{num}; " if ($emit_line_numbers);
        print "${$h}{line}\n";

        foreach ( @{ ${ $qt->get_seen_hash }{$k} } ) {
            print "**** ";
            print "${$_}{num}; " if ($emit_line_numbers);
            print "${$_}{line}\n";
        }
    }
}

# =end comment

# =cut

=pod

=head2 Print All Matching Lines

Use two loops to print the collection of o/p lines, grouped 
and sorted by qid.

The outer loop dereferences the hash ref,
  selects the keys (which are qid's),
  sorts the list by qid,
  then iterates over its block using each qid as the index value.
  The first entry is extracted from the AoH & printed.

The inner loop takes the qid as a key for the %_seen hash,
  gets the hash value for that key (which is a ref to an array),
  dereferences the array,
  iterates over every member of that array,
  dereferences the entry, which is a hash ref,
  extracts the values for line number and line,
  and prints those two values.

=cut

exit;

sub usage {
    return <<"eousage";
usage $prog: [options] -m match_string <log_files>

$prog is a filter for sendmail log files.
It follows sendmails queue id strings so that sequences of log lines can be found.

Options to control the matching

-match-pattern string    log lines are matched against this literal (not regex) pattern.
                         typical usage is an email address, or a virus name.
                         Required.

-window-size   int       a window of log lines both in front of, and behind the current line
                         is kept.  Matches will be found in this buffer.
                         Default: 100

Output options

-number-output  flag     emit the line number of the matching line on output

-start-column   int      Control what portion of the matching line is displayed.
                         start-column gives the first column of the output line displayed.
-output-length  int      Length of the output line before line numbering, if any.
eousage
}

